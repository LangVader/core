name: Vader CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-transpilers:
    name: Test All Transpilers
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Install additional compilers
      run: |
        sudo apt-get update
        sudo apt-get install -y g++ nodejs npm openjdk-11-jdk
        
        # Install Rust
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source ~/.cargo/env
        
        # Install Go
        wget https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
        sudo tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz
        echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
        source ~/.bashrc
    
    - name: Test Core Transpilers
      run: |
        python -m pytest test_transpilers.py -v --cov=transpilers/
    
    - name: Test New Transpilers (C++, Rust, Go)
      run: |
        source ~/.cargo/env
        export PATH=$PATH:/usr/local/go/bin
        python test_new_transpilers.py
    
    - name: Test Flask App Generator
      run: |
        python test_flask_app_generator.py
    
    - name: Test Project Generator
      run: |
        python test_project_generator.py
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  test-app-generators:
    name: Test Application Generators
    runs-on: ubuntu-latest
    needs: test-transpilers
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flask pytest
    
    - name: Test Web App Generation
      run: |
        python src/app_generator.py examples/calculadora.vdr --type web
        ls -la generated_apps/
    
    - name: Test Flask App Generation
      run: |
        python src/app_generator.py examples/calculadora.vdr --type flask
        ls -la generated_apps/
    
    - name: Test Project Generation
      run: |
        python src/project_generator.py examples/calculadora.vdr --languages python,javascript
        ls -la generated_projects/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Bandit Security Scan
      run: |
        pip install bandit
        bandit -r src/ transpilers/ -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: bandit-report.json

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install quality tools
      run: |
        pip install flake8 black isort mypy
    
    - name: Run Black formatter check
      run: |
        black --check --diff src/ transpilers/
    
    - name: Run isort import sorting check
      run: |
        isort --check-only --diff src/ transpilers/
    
    - name: Run Flake8 linting
      run: |
        flake8 src/ transpilers/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run MyPy type checking
      run: |
        mypy src/ transpilers/ --ignore-missing-imports

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install documentation dependencies
      run: |
        pip install mkdocs mkdocs-material
    
    - name: Build documentation
      run: |
        mkdocs build --strict
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test-transpilers, test-app-generators, security-scan, code-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install build dependencies
      run: |
        pip install build twine
    
    - name: Get version
      id: get_version
      run: |
        VERSION=$(python -c "import src.vader; print(src.vader.__version__)")
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        release_name: Vader v${{ steps.get_version.outputs.VERSION }}
        body: |
          ## Cambios en esta versión
          
          ### Transpiladores
          - ✅ Python (corregido y funcional)
          - ✅ JavaScript (corregido y funcional)
          - ✅ Java (mejorado y funcional)
          - ✅ C++ (nuevo - funcional)
          - ✅ Rust (nuevo - funcional)
          - ✅ Go (nuevo - funcional)
          - ✅ HTML/CSS (funcional)
          - ✅ Solidity (básico)
          
          ### Generadores de Aplicaciones
          - ✅ Generador de aplicaciones web JavaScript
          - ✅ Generador de aplicaciones Flask Python
          - ✅ Generador de proyectos completos multi-lenguaje
          
          ### Testing
          - ✅ Tests automáticos para todos los transpiladores
          - ✅ Tests de generación de aplicaciones
          - ✅ CI/CD pipeline completo
          
          Ver el [CHANGELOG](CHANGELOG.md) para más detalles.
        draft: false
        prerelease: false

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install performance testing tools
      run: |
        pip install pytest-benchmark memory-profiler
    
    - name: Run performance benchmarks
      run: |
        python -m pytest performance_tests/ --benchmark-only --benchmark-json=benchmark.json
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json
