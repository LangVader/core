name: Nightly Tests

on:
  schedule:
    # Ejecutar todos los días a las 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Permitir ejecución manual

jobs:
  comprehensive-test:
    name: Comprehensive Nightly Testing
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies (Ubuntu/macOS)
      if: runner.os != 'Windows'
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-benchmark
        
        # Install compilers
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          sudo apt-get update
          sudo apt-get install -y g++ nodejs npm openjdk-11-jdk
          
          # Install Rust
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source ~/.cargo/env
          
          # Install Go
          wget https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
          sudo tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz
          echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          brew install gcc node openjdk rust go
        fi
    
    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-benchmark
        
        # Install chocolatey packages
        choco install mingw nodejs openjdk rust golang -y
    
    - name: Run all transpiler tests
      run: |
        python test_transpilers.py
        python test_new_transpilers.py
        python test_flask_app_generator.py
    
    - name: Run stress tests
      run: |
        python -m pytest stress_tests/ -v --tb=short
    
    - name: Generate coverage report
      run: |
        pytest --cov=src/ --cov=transpilers/ --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: nightly-${{ matrix.os }}-${{ matrix.python-version }}

  memory-leak-test:
    name: Memory Leak Detection
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install memory profiling tools
      run: |
        pip install memory-profiler psutil
    
    - name: Run memory leak tests
      run: |
        python memory_tests/test_memory_leaks.py
    
    - name: Upload memory reports
      uses: actions/upload-artifact@v3
      with:
        name: memory-reports
        path: memory_reports/

  performance-regression:
    name: Performance Regression Testing
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install performance tools
      run: |
        pip install pytest-benchmark asv
    
    - name: Run performance benchmarks
      run: |
        python -m pytest performance_tests/ --benchmark-json=nightly-benchmark.json
    
    - name: Compare with baseline
      run: |
        python performance_tests/compare_benchmarks.py nightly-benchmark.json baseline-benchmark.json
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: nightly-benchmarks
        path: nightly-benchmark.json

  integration-test:
    name: End-to-End Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install all dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flask pytest selenium
        sudo apt-get update
        sudo apt-get install -y g++ nodejs npm openjdk-11-jdk
    
    - name: Run integration tests
      run: |
        python integration_tests/test_full_workflow.py
    
    - name: Test generated applications
      run: |
        # Generar aplicación Flask y probarla
        python src/app_generator.py examples/calculadora.vdr --type flask
        cd generated_apps/calculadora_flask
        python app.py &
        sleep 5
        curl -f http://localhost:5000 || exit 1
        pkill -f "python app.py"
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      with:
        name: integration-results
        path: integration_results/

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install security tools
      run: |
        pip install bandit safety semgrep
    
    - name: Run Bandit security scan
      run: |
        bandit -r src/ transpilers/ -f json -o bandit-nightly.json
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-nightly.json
    
    - name: Run Semgrep scan
      run: |
        semgrep --config=auto --json --output=semgrep-nightly.json src/ transpilers/
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-nightly.json
          safety-nightly.json
          semgrep-nightly.json

  notify-results:
    name: Notify Test Results
    runs-on: ubuntu-latest
    needs: [comprehensive-test, memory-leak-test, performance-regression, integration-test, security-audit]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.comprehensive-test.result == 'success' && needs.memory-leak-test.result == 'success' && needs.performance-regression.result == 'success' && needs.integration-test.result == 'success' && needs.security-audit.result == 'success'
      run: |
        echo "✅ All nightly tests passed successfully!"
    
    - name: Notify failure
      if: needs.comprehensive-test.result == 'failure' || needs.memory-leak-test.result == 'failure' || needs.performance-regression.result == 'failure' || needs.integration-test.result == 'failure' || needs.security-audit.result == 'failure'
      run: |
        echo "❌ Some nightly tests failed. Check the logs for details."
        exit 1
